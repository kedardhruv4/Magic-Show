{"version":3,"sources":["views/games/Games.js"],"names":["Games","_useState","useState","_useState2","_slicedToArray","games","setGames","_useState3","_useState4","page","setPage","_useState5","_useState6","total","setTotal","dispatch","useDispatch","_useState7","_useState8","loding","setLoding","_useState9","_useState10","isUpdate","setIsUpdate","getGames","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","type","limit","_response$data","response","_response$data2","_response$data3","wrap","_context","prev","next","contentGet","sent","data","status","count","stop","_x","_x2","_x3","apply","arguments","useEffect","_jsx","_Fragment","children","SpinnerComponent","_jsxs","Row","className","map","ele","index","CardTitles","to","concat","_id","edit","refresh","length","Col","lg","sm","ReactPaginate","nextLabel","pageCount","onPageChange","event","selected","breakLabel","previousLabel","activeClassName","pageClassName","breakClassName","nextLinkClassName","pageLinkClassName","breakLinkClassName","nextClassName","previousLinkClassName","previousClassName","containerClassName"],"mappings":"gOAwFeA,UAhFD,WACZ,IAAAC,EAA0BC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA/BI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GACtBI,EAAwBL,mBAAS,GAAEM,EAAAJ,YAAAG,EAAA,GAA5BE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GACpBG,EAA0BT,mBAAS,GAAEU,EAAAR,YAAAO,EAAA,GAA9BE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAGhBG,EAAWC,cACjBC,EAA4Bf,oBAAS,GAAMgB,EAAAd,YAAAa,EAAA,GAApCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GACxBG,EAAgCnB,oBAAS,GAAMoB,EAAAlB,YAAAiB,EAAA,GAAxCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAEtBG,EAAWC,sBAAW,eAAAC,EAAAC,YAAAC,IAAAC,MAC1B,SAAAC,EAAOC,EAAMvB,EAAMwB,GAAK,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAR,IAAAS,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACP,OAAfrB,GAAU,GAAKmB,EAAAE,KAAA,EACQ1B,EAAS2B,YAAWV,EAAMvB,EAAMwB,IAAO,OAC/B,OAAnB,QADNE,EAAQI,EAAAI,YACF,IAARR,GAAc,QAAND,EAARC,EAAUS,YAAI,IAAAV,OAAN,EAARA,EAAgBW,UAClBvC,EAAiB,OAAR6B,QAAQ,IAARA,GAAc,QAANC,EAARD,EAAUS,YAAI,IAAAR,OAAN,EAARA,EAAgBQ,MACzB9B,EAAiB,OAARqB,QAAQ,IAARA,GAAc,QAANE,EAARF,EAAUS,YAAI,IAAAP,OAAN,EAARA,EAAgBS,OACzB1B,GAAU,IAEZA,GAAU,GAAM,wBAAAmB,EAAAQ,UAAAhB,OACjB,gBAAAiB,EAAAC,EAAAC,GAAA,OAAAvB,EAAAwB,MAAA,KAAAC,YAVyB,GAW1B,CAAC3C,EAjBW,IAoBd4C,qBAAU,WACR5B,EApBW,QAoBIhB,EArBH,KAsBX,CAACA,EAtBU,EAsBGc,IAIjB,OACE+B,cAAAC,WAAA,CAAAC,SACIrC,EA0CAmC,cAACG,IAAgB,IAzCjBC,eAAAH,WAAA,CAAAC,SAAA,CACEF,cAACK,IAAG,CAACC,UAAU,eAAcJ,SACrB,OAALnD,QAAK,IAALA,OAAK,EAALA,EAAOwD,KAAI,SAACC,EAAKC,GAChB,OACET,cAACU,IAAU,CACTpB,KAAMkB,EAENG,GAAE,eAAAC,OAAoB,OAAHJ,QAAG,IAAHA,OAAG,EAAHA,EAAKK,KACxBC,KAAI,eAAAF,OAAoB,OAAHJ,QAAG,IAAHA,OAAG,EAAHA,EAAKK,KAC1BE,QAAS,kBAAM7C,GAAaD,KAHvBwC,QAQM,KAAb,OAAL1D,QAAK,IAALA,OAAK,EAALA,EAAOiE,QACNhB,cAACK,IAAG,CAAAH,SACFF,cAACiB,IAAG,CAACC,GAAG,IAAIC,GAAG,KAAIjB,SACjBF,cAACoB,IAAa,CACZC,UAAU,GACVC,UAAW/D,EAhDb,EAiDEgE,aA1BQ,SAAAC,GACtBpE,GAAa,OAALoE,QAAK,IAALA,OAAK,EAALA,EAAOC,UAAW,IA0BZC,WAAW,MACXC,cAAc,GACdC,gBAAgB,SAChBC,cAAc,YACdC,eAAe,YACfC,kBAAkB,YAClBC,kBAAkB,YAClBC,mBAAmB,YACnBC,cAAc,iBACdC,sBAAsB,YACtBC,kBAAkB,iBAClBC,mBAAmB,kCAKzBrC,cAAA,MAAAE,SAAI","file":"static/js/24.9946e3a7.chunk.js","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react'\nimport { Col, Row } from 'reactstrap'\nimport CardTitles from '../../components/CardTitles'\nimport { useDispatch } from 'react-redux'\nimport { contentGet } from '../../redux/action/contentAction'\nimport ReactPaginate from 'react-paginate'\nimport SpinnerComponent from '../../@core/components/spinner/Fallback-spinner'\n\nconst Games = () => {\n  const [games, setGames] = useState([])\n  const [page, setPage] = useState(1)\n  const [total, setTotal] = useState(0)\n  const limit = 8\n  const type = 'games'\n  const dispatch = useDispatch()\n  const [loding, setLoding] = useState(false)\n  const [isUpdate, setIsUpdate] = useState(false)\n\n  const getGames = useCallback(\n    async (type, page, limit) => {\n      setLoding(true)\n      const response = await dispatch(contentGet(type, page, limit))\n      if (response?.data?.status === 200) {\n        setGames(response?.data?.data)\n        setTotal(response?.data?.count)\n        setLoding(false)\n      }\n      setLoding(false)\n    },\n    [page, limit]\n  )\n\n  useEffect(() => {\n    getGames(type, page, limit)\n  }, [page, limit, isUpdate])\n  const handlePageClick = event => {\n    setPage(event?.selected + 1)\n  }\n  return (\n    <>\n      {!loding ? (\n        <>\n          <Row className='match-height'>\n            {games?.map((ele, index) => {\n              return (\n                <CardTitles\n                  data={ele}\n                  key={index}\n                  to={`/games-view/${ele?._id}`}\n                  edit={`/games-edit/${ele?._id}`}\n                  refresh={() => setIsUpdate(!isUpdate)}\n                />\n              )\n            })}\n          </Row>\n          {games?.length !== 0 ? (\n            <Row>\n              <Col lg='4' sm='12'>\n                <ReactPaginate\n                  nextLabel=''\n                  pageCount={total / limit}\n                  onPageChange={handlePageClick}\n                  breakLabel='...'\n                  previousLabel=''\n                  activeClassName='active'\n                  pageClassName='page-item'\n                  breakClassName='page-item'\n                  nextLinkClassName='page-link'\n                  pageLinkClassName='page-link'\n                  breakLinkClassName='page-link'\n                  nextClassName='page-item next'\n                  previousLinkClassName='page-link'\n                  previousClassName='page-item prev'\n                  containerClassName='pagination react-paginate'\n                />\n              </Col>\n            </Row>\n          ) : (\n            <h1>No data found</h1>\n          )}\n        </>\n      ) : (\n        <SpinnerComponent />\n      )}\n    </>\n  )\n}\n\nexport default Games\n"],"sourceRoot":""}